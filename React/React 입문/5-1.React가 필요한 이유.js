// React가 필요한 이유
// 어떤 기술을 배운다는 것은 단순히 기술의 사용 방법뿐만 아는 것이 아니다.
// 사용 방법만 알게 되면 기술의 시야가 좁아지고 자문제 문제해결력 부족해진다.
// 단순히 사용법만 알아서 시야가 좁아진 사람은 내가 배운 대로 가 아니면,
// 또는 겪어본 일이 아니면 해결할 수 없게 되고 해결할 의지를 갖지도 못하게 된다.
// 왜 이러한 기술이 필요했고 왜 훌륭한 기술로 평가받고 있는지 알아야 한다.

// React는 왜 필요한걸까?

// ** 1. React Component 기반의 UI 라이브러리 **
// 기존 HTML로 파일 구성 시 "중복되는 코드"에 대해서 수정이 필요한 부분만 발생 시 모든 파일의 각각의 코드를 수정해야함
// 중복 되는 코드가 많을 수록 웹사이트가 수정되거나 제거되어야하는 상황 즉, 유지보수에서 큰 문제가 발생

// 공통 요소 부분을 별도의 파일이나 모듈로 분리 (= 컴포넌트화 방식)
//  - 중볻되는 코드의 양이 줄어듬
//  - 수정 사항 또는 문제가 발생할 시 유지보수 하기가 쉬워짐
// - 레고를 조립하듯이 개발을 할 수 있음 재사용성에 용이함

// ** 2. React 선언형 프로그래밍 **
// 명령형 프로그래밍은 절차를 하나하나 다 나열 해야한다. ex) jQuery
//  - 결과를 표시할 요소를 가져온다.
//  - 현재 결과값을 10진수 기준, 숫자형으로 변환해서 가져와 Current라는 상수에 저장
//  - Current 상수에 저장된 값을 결과를 표시할 요소의 값에 plus라면 +1 넣고 minus 라면 -1 해서 넣는다.

// 선언형 프로그래밍은 목적을 바로 말한다. ex) React
//  - plus를 누르면 result 값에 +1 한다. Minus를 눌렀따면 반대로 한다.

// ** 3. React Virtual DOM, 가상돔**
// DOM Document Object Model : 브라우저가 실제로 사용하는 객체 (웹 브라우저가 HTML 파일을 해석할 때 트리 형태로 변환)

// 데이터가 추가되거나 삭제할 때마다(DOM 요소가 업데이트 시) 브라우저의 전체 렌더링 과정이 일어남 > 성능 이슈 발생
// 실제로 변화하는 DOM에 대해 가상의 돔을 만들어 실제 변경된 DOM만 트리에 반영한다.
